(function (global) {
	let startY = 0;
	let enabled = false;
	let supportsPassiveOption = false;
	try {
		const opts = Object.defineProperty({}, 'passive', {
			get() {
				supportsPassiveOption = true;
			},
		});
		window.addEventListener('test', null, opts);
	} catch (e) {}
	const handleTouchmove = function (evt) {
		let el = evt.target;
		const zoom =
			window.innerWidth / window.document.documentElement.clientWidth;
		if (evt.touches.length > 1 || zoom !== 1) {
			return;
		}
		while (el !== document.body && el !== document) {
			const style = window.getComputedStyle(el);
			if (!style) {
				break;
			}
			if (el.nodeName === 'INPUT' && el.getAttribute('type') === 'range') {
				return;
			}
			const scrolling = style.getPropertyValue('-webkit-overflow-scrolling');
			const overflowY = style.getPropertyValue('overflow-y');
			const height = parseInt(style.getPropertyValue('height'), 10);
			const isScrollable =
				scrolling === 'touch' &&
				(overflowY === 'auto' || overflowY === 'scroll');
			const canScroll = el.scrollHeight > el.offsetHeight;
			if (isScrollable && canScroll) {
				const curY = evt.touches ? evt.touches[0].screenY : evt.screenY;
				const isAtTop = startY <= curY && el.scrollTop === 0;
				const isAtBottom =
					startY >= curY && el.scrollHeight - el.scrollTop === height;
				if (isAtTop || isAtBottom) {
					evt.preventDefault();
				}
				return;
			}
			el = el.parentNode;
		}
		evt.preventDefault();
	};
	const handleTouchstart = function (evt) {
		startY = evt.touches ? evt.touches[0].screenY : evt.screenY;
	};
	const enable = function () {
		window.addEventListener(
			'touchstart',
			handleTouchstart,
			supportsPassiveOption ? { passive: false } : false
		);
		window.addEventListener(
			'touchmove',
			handleTouchmove,
			supportsPassiveOption ? { passive: false } : false
		);
		enabled = true;
	};
	const disable = function () {
		window.removeEventListener('touchstart', handleTouchstart, false);
		window.removeEventListener('touchmove', handleTouchmove, false);
		enabled = false;
	};
	const isEnabled = function () {
		return enabled;
	};
	const testDiv = document.createElement('div');
	document.documentElement.appendChild(testDiv);
	testDiv.style.WebkitOverflowScrolling = 'touch';
	const scrollSupport =
		'getComputedStyle' in window &&
		window.getComputedStyle(testDiv)['-webkit-overflow-scrolling'] === 'touch';
	document.documentElement.removeChild(testDiv);
	if (scrollSupport) {
		enable();
	}
	const iNoBounce = {
		enable,
		disable,
		isEnabled,
	};
	if (typeof module !== 'undefined' && module.exports) {
		module.exports = iNoBounce;
	}
	if (typeof global.define === 'function') {
		(function (define) {
			define('iNoBounce', [], function () {
				return iNoBounce;
			});
		})(global.define);
	} else {
		global.iNoBounce = iNoBounce;
	}
})(this);
